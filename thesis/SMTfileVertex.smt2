(set-option :count-models true)
(set-logic QF_BV)
(set-option :print-clauses-file "./counts.cnf")(set-info :smt-lib-version 2.0)
(declare-fun rho_1 () (_ BitVec 32))
(declare-fun phi_1 () Bool)
(declare-fun rho_2 () (_ BitVec 32))
(declare-fun phi_2 () Bool)
(declare-fun rho_3 () (_ BitVec 32))
(declare-fun phi_3 () Bool)
(declare-fun rho_4 () (_ BitVec 32))
(declare-fun phi_4 () Bool)
(declare-fun rho_5 () (_ BitVec 32))
(declare-fun phi_5 () Bool)
(declare-fun rho_6 () (_ BitVec 32))
(declare-fun phi_6 () Bool)
(declare-fun rho_7 () (_ BitVec 32))
(declare-fun phi_7 () Bool)
(declare-fun rho_8 () (_ BitVec 32))
(declare-fun phi_8 () Bool)
(declare-fun rho_9 () (_ BitVec 32))
(declare-fun phi_9 () Bool)
(declare-fun rho_10 () (_ BitVec 32))
(declare-fun phi_10 () Bool)
(declare-fun rho_11 () (_ BitVec 32))
(declare-fun phi_11 () Bool)
(declare-fun rho_12 () (_ BitVec 32))
(declare-fun phi_12 () Bool)
(declare-fun rho_13 () (_ BitVec 32))
(declare-fun phi_13 () Bool)
(declare-fun rho_14 () (_ BitVec 32))
(declare-fun phi_14 () Bool)
(declare-fun rho_15 () (_ BitVec 32))
(declare-fun phi_15 () Bool)
(declare-fun warehouseid () (_ BitVec 32))
(declare-fun oliid1 () (_ BitVec 32))
(declare-fun oliid4 () (_ BitVec 32))
(declare-fun oliid10 () (_ BitVec 32))
(declare-fun oliid13 () (_ BitVec 32))
(declare-fun oliid7 () (_ BitVec 32))
(declare-fun oliid5 () (_ BitVec 32))
(declare-fun oliid0 () (_ BitVec 32))
(declare-fun oliid6 () (_ BitVec 32))
(declare-fun oliid14 () (_ BitVec 32))
(declare-fun oliid11 () (_ BitVec 32))
(declare-fun oliid8 () (_ BitVec 32))
(declare-fun oliid2 () (_ BitVec 32))
(declare-fun oliid12 () (_ BitVec 32))
(declare-fun oliid9 () (_ BitVec 32))
(declare-fun oliid3 () (_ BitVec 32))
(declare-fun test () (_ BitVec 32))
(assert (= rho_1 (bvadd warehouseid (bvmul oliid1 #b00000000000000000000000001100100))))
(assert (= phi_1 (and (bvult warehouseid #b00000000000000000000000000000001)(bvult oliid1 #b00000000000000011000011010100000))))
(assert (= rho_2 (bvadd warehouseid (bvmul oliid4 #b00000000000000000000000001100100))))
(assert (= phi_2 (and (bvult oliid4 #b00000000000000011000011010100000)(bvult warehouseid #b00000000000000000000000000000001))))
(assert (= rho_3 (bvadd warehouseid (bvmul oliid10 #b00000000000000000000000001100100))))
(assert (= phi_3 (and (bvult oliid10 #b00000000000000011000011010100000)(bvult warehouseid #b00000000000000000000000000000001))))
(assert (= rho_4 (bvadd warehouseid (bvmul oliid13 #b00000000000000000000000001100100))))
(assert (= phi_4 (and (bvult warehouseid #b00000000000000000000000000000001)(bvult oliid13 #b00000000000000011000011010100000))))
(assert (= rho_5 (bvadd warehouseid (bvmul oliid7 #b00000000000000000000000001100100))))
(assert (= phi_5 (and (bvult warehouseid #b00000000000000000000000000000001)(bvult oliid7 #b00000000000000011000011010100000))))
(assert (= rho_6 (bvadd warehouseid (bvmul oliid5 #b00000000000000000000000001100100))))
(assert (= phi_6 (and (bvult oliid5 #b00000000000000011000011010100000)(bvult warehouseid #b00000000000000000000000000000001))))
(assert (= rho_7 (bvadd warehouseid (bvmul oliid0 #b00000000000000000000000001100100))))
(assert (= phi_7 (and (bvult oliid0 #b00000000000000011000011010100000)(bvult warehouseid #b00000000000000000000000000000001))))
(assert (= rho_8 (bvadd warehouseid (bvmul oliid6 #b00000000000000000000000001100100))))
(assert (= phi_8 (and (bvult oliid6 #b00000000000000011000011010100000)(bvult warehouseid #b00000000000000000000000000000001))))
(assert (= rho_9 (bvadd warehouseid (bvmul oliid14 #b00000000000000000000000001100100))))
(assert (= phi_9 (and (bvult warehouseid #b00000000000000000000000000000001)(bvult oliid14 #b00000000000000011000011010100000))))
(assert (= rho_10 (bvadd warehouseid (bvmul oliid11 #b00000000000000000000000001100100))))
(assert (= phi_10 (and (bvult oliid11 #b00000000000000011000011010100000)(bvult warehouseid #b00000000000000000000000000000001))))
(assert (= rho_11 (bvadd warehouseid (bvmul oliid8 #b00000000000000000000000001100100))))
(assert (= phi_11 (and (bvult warehouseid #b00000000000000000000000000000001)(bvult oliid8 #b00000000000000011000011010100000))))
(assert (= rho_12 (bvadd warehouseid (bvmul oliid2 #b00000000000000000000000001100100))))
(assert (= phi_12 (and (bvult warehouseid #b00000000000000000000000000000001)(bvult oliid2 #b00000000000000011000011010100000))))
(assert (= rho_13 (bvadd warehouseid (bvmul oliid12 #b00000000000000000000000001100100))))
(assert (= phi_13 (and (bvult warehouseid #b00000000000000000000000000000001)(bvult oliid12 #b00000000000000011000011010100000))))
(assert (= rho_14 (bvadd warehouseid (bvmul oliid9 #b00000000000000000000000001100100))))
(assert (= phi_14 (and (bvult warehouseid #b00000000000000000000000000000001)(bvult oliid9 #b00000000000000011000011010100000))))
(assert (= rho_15 (bvadd warehouseid (bvmul oliid3 #b00000000000000000000000001100100))))
(assert (= phi_15 (and (bvult oliid3 #b00000000000000011000011010100000)(bvult warehouseid #b00000000000000000000000000000001))))
(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and phi_1 phi_2) phi_3) phi_4) phi_5) phi_6) phi_7) phi_8) phi_9) phi_10) phi_11) phi_12) phi_13) phi_14) phi_15))
(assert (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (! test :named v1) rho_1)(= test rho_2))(= test rho_3))(= test rho_4))(= test rho_5))(= test rho_6))(= test rho_7))(= test rho_8))(= test rho_9))(= test rho_10))(= test rho_11))(= test rho_12))(= test rho_13))(= test rho_14))(= test rho_15)))
(count-models v1)
(exit)